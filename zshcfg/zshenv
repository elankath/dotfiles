# vim: set sw=2 ts=2 sts=2 et tw=80 foldmarker={,} foldlevel=0 foldmethod=marker spell:
# See ZSH startup files: http://zsh.sourceforge.net/Intro/intro_3.html
# Link this to ~/.zshenv
# .zshenv is sourced on all invocations.
# All env variables including path should be set here.
# Should not produce output or aassume that shell is attached to tty.

[ -d ~/dotfiles ] && export dotfiles=~/dotfiles || echo "Could not locate dotfiles at ~/dotfiles"

# Autoloads 
# See https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
#fpath=($dotfiles/zshcfg/zfuncs $fpath)
#autoload -Uz detect_os determine_user

source $dotfiles/zshcfg/zfuncs/detect.zsh


main() {
  detect_os
  detect_user
  detect_util
  load_dotenv
  load_dotpaths
  defenv_golang
  defenv_android
  defenv_flutter
  defenv_git
  defenv_kotlin
  defenv_neosdk
  defenv_python
  export MANPATH=":$dotfiles/man"
}



# Source ~/.env. ~/.env should export user/system
# specific environment variables
load_dotenv() {
  envfile=~/.env
  [[ -f $envfile ]] && source $envfile
}

# Loads lines from ~/.paths and adds each line as 
# path component to env PATH 
load_dotpaths() {
  #ensure that cygwin stuff is first in path, so that windows path doesn't take priority
  export PATH="/bin:/usr/bin:~/.fzf/bin:$PATH"
  # http://zsh.sourceforge.net/Guide/zshguide02.html#l24
  typeset -gxU path PATH
  path+=( $dotfiles/scripts ~/bin )
  pathsf=~/.paths
  if [[ -f $pathsf ]]; then
    #http://stackoverflow.com/questions/12651355/zsh-read-lines-from-file-into-array
    zmodload zsh/mapfile
    FLINES=( "${(f)mapfile[$pathsf]}" )
    LIST="${mapfile[$pathsf]}" # Not required unless stuff uses it
    integer POS=1             # Not required unless stuff uses it
    integer SIZE=$#FLINES     # Number of lines, not required unless stuff uses it
    # setting path list sets PATH in zsh
    path+=( $FLINES )
  fi
  export PATH
}

defenv_golang() {
  if [[ $GOROOT ]]; then
    [[ $isCygwin ]] && { export GOROOT=`cygpath -am $GOROOT` }
  fi
  if [[ $isCygwin ]]; then
    export GOPATH=`cygpath -am ~`
  else
    export GOPATH="$HOME"
  fi
  if [[ -d /usr/local/go/ ]]; then
    typeset -gxU path PATH
    export GOROOT=/usr/local/go
    path+=$GOROOT/bin
    export PATH
  fi
}

defenv_android() {
  if [[ -d /usr/local/share/android-sdk ]]; then
    export ANDROID_SDK_ROOT=/usr/local/share/android-sdk
    export ANDROID_HOME=$ANDROID_SDK_ROOT
  fi
}

defenv_flutter() {
  typeset -gxU path PATH
  if [[ -d $HOME/src/flutter/bin ]]; then
    path+=$HOME/src/flutter/bin
  fi
  if [[ -d $HOME/src/flutter/flutter/bin ]]; then
    path+=$HOME/src/flutter/flutter/bin
  fi
  export PATH
}

defenv_git() {
  if command -v nvim  >/dev/null 2>&1 ; then
    export VISUAL=nvim
  elif command -v vim  >/dev/null 2>&1 ; then
    export VISUAL=vim
  else
    export VISUAL=vi
  fi
  export EDITOR=$VISUAL
  export GIT_EDITOR=$VISUAL
}

defenv_kotlin() {
  local konanbin=$HOME/src/kotlin-native/dist/bin
  if [[ -d $konanbin ]]; then
    export PATH=$PATH:$konanbin
  fi
}

defenv_neosdk() {
  typeset -gxU path PATH
  local neoweb=$HOME/sdk/neoweb
  local neoee=$HOME/sdk/neoee
  if [[ -d $neoweb ]]; then
    path+=$neoweb/tools
  fi
  if [[ -d $neoee ]]; then
    path+=$neoee/tools
  fi
}

defenv_python() {
  [ -d ~/Library/Python/*/bin ] && export PATH="$PATH"
}

export PATH
main

# See https://github.com/rupa/z/pull/200
[[ $isWsl ]] && { unsetopt BG_NICE }

